version: '3.8'

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=tutor_db
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_DIALECT=postgres
      - JWT_SECRET=secR33rJaw^coD
      - MAIL_HOST=smtp.gmail.com
      - MAIL_PORT=587
      - MAIL_USERNAME=your_email@gmail.com
      - MAIL_PASSWORD=your_app_password
      - MAIL_FROM=noreply@yourapp.com
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    image: postgres:17-alpine
    environment:
      - POSTGRES_DB=node_express_pg_starter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    # Optional: expose to host for tools that connect directly (TablePlus, etc.)
    # You can remove this in prod to keep DB internal-only.
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d node_express_pg_starter"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: secret
      # Optional: run in desktop-style mode (no master password prompt)
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8084:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      # Optional: auto-register the Postgres server in pgAdmin on first run
      # s- ./pgadmin:/pgadmin4:ro
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  app-network:
    driver: bridge
