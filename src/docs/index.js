// src/docs/index.js
const swaggerUi = require('swagger-ui-express');
const swaggerJSDoc = require('swagger-jsdoc');
// src/docs/index.js
const path = require('path');

function loadPkg() {
  // First try project root (works in Docker: /app/package.json)
  try { return require(path.resolve(process.cwd(), 'package.json')); } catch (_) {}
  // Fallback: from compiled file location (/app/dist/src/docs)
  try { return require(path.join(__dirname, '../../../package.json')); } catch (_) {}
  // Last resort default
  return { version: '0.0.0' };
}

const pkg = loadPkg();

// Map Sequelize -> OpenAPI types
function mapSequelizeTypeToOpenAPI(attr) {
  const dt = attr.type?.key || attr.type?.constructor?.key || String(attr.type);
  const nullable = attr.allowNull === true;

  // default
  let schema = { type: 'string' };

  switch (dt) {
    case 'UUID':
      schema = { type: 'string', format: 'uuid' };
      break;
    case 'INTEGER':
    case 'BIGINT':
    case 'SMALLINT':
      schema = { type: 'integer' };
      break;
    case 'FLOAT':
    case 'DOUBLE':
    case 'DECIMAL':
    case 'REAL':
      schema = { type: 'number' };
      break;
    case 'BOOLEAN':
      schema = { type: 'boolean' };
      break;
    case 'DATE':
    case 'DATEONLY':
      schema = { type: 'string', format: 'date-time' };
      break;
    case 'JSON':
    case 'JSONB':
      schema = { type: 'object', additionalProperties: true };
      break;
    case 'ARRAY':
      // crude array inference
      schema = { type: 'array', items: { type: 'string' } };
      break;
    case 'TEXT':
    case 'STRING':
    default:
      schema = { type: 'string' };
  }
  if (nullable) schema.nullable = true;
  return schema;
}

// Build components.schemas from sequelize models
function buildSchemasFromSequelize(sequelize) {
  const schemas = {};
  for (const [modelName, model] of Object.entries(sequelize.models || {})) {
    const attrs = model.rawAttributes || model.getAttributes?.() || {};
    const required = [];
    const properties = {};

    for (const [name, attr] of Object.entries(attrs)) {
      properties[name] = mapSequelizeTypeToOpenAPI(attr);
      if (attr.allowNull === false && attr.defaultValue === undefined && !attr._autoGenerated) {
        required.push(name);
      }
    }

    schemas[modelName] = {
      type: 'object',
      properties,
      ...(required.length ? { required } : {})
    };
  }
  return schemas;
}

// Expose a function to mount Swagger
function mountSwagger(app, { sequelize, config }) {
  const version = (config?.api?.version) || 'v1';
  const basePath = (config?.api?.prefixEnabled) ? `/api/${version}` : `/${version}`;

  const options = {
    definition: {
      openapi: '3.0.3',
      info: {
        title: 'Tutor App API',
        version: pkg.version,
        description: 'OpenAPI documentation for node-express-pg-starter'
      },
      servers: [
        { url: `${config?.host ? `http://${config.host}:${config.port}` : ''}${basePath}`, description: 'Local' }
      ],
      components: {
        securitySchemes: {
          BearerAuth: {
            type: 'http',
            scheme: 'bearer',
            bearerFormat: 'JWT'
          }
        },
        schemas: {} // filled below
      },
      security: [{ BearerAuth: [] }]
    },
    // Scan route files for JSDoc @openapi blocks
    apis: [
      'src/routes/**/*.js',
      'src/controllers/**/*.js'
    ]
  };

  // initialize spec
  const swaggerSpec = swaggerJSDoc(options);

  // merge generated Sequelize schemas
  try {
    const generated = buildSchemasFromSequelize(sequelize);
    swaggerSpec.components.schemas = {
      ...(swaggerSpec.components.schemas || {}),
      ...generated
    };
  } catch (e) {
    // donâ€™t crash if generation fails; just log
    console.warn('Swagger: failed to generate schemas from Sequelize:', e.message);
  }

  // Mount at /docs (and raw JSON at /docs.json)
  app.get('/docs.json', (_req, res) => res.json(swaggerSpec));
  app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec, { explorer: true }));

  // helpful log
  console.log(`ðŸ“š Swagger UI: http://${config.host}:${config.port}/docs`);
  console.log(`ðŸ“„ OpenAPI JSON: http://${config.host}:${config.port}/docs.json`);
}

module.exports = { mountSwagger };
